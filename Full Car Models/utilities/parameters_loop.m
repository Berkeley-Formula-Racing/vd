function [car_cell] = parameters_loop(cP,aP,eP,DTp,Bp,tP)

% output car_cell: a cell containing a car for each possible combination of parameters

    [mass,driver_weight,accel_driver_weight,wheelbase,weight_dist,track_width,wheel_radius,cg_height,...
    roll_center_height_front,roll_center_height_rear,R_sf,I_zz,cda,cla,distribution,...
    accel_cda,accel_cla,redline,shift_point,shift_time,final_drive,drivetrain_efficiency,...
    G_d1,G_d2_overrun,G_d2_driving,brake_distribution,max_braking_torque,...
    gamma,p_i,ackermann,camber_compliance_f,camber_compliance_r,static_r_toe] = ndgrid(...
    cP.mass,cP.driver_weight,cP.accel_driver_weight,cP.wheelbase,cP.weight_dist,cP.track_width,...
    cP.wheel_radius,cP.cg_height,cP.roll_center_height_front,cP.roll_center_height_rear,...
    cP.R_sf,cP.I_zz,aP.cda,aP.cla,aP.distribution,aP.accel_cda,aP.accel_cla,eP.redline,...
    eP.shift_point,eP.shift_time,DTp.final_drive,DTp.drivetrain_efficiency,...
    DTp.G_d1,DTp.G_d2_overrun,DTp.G_d2_driving,Bp.brake_distribution,Bp.max_braking_torque,...
    tP.gamma,tP.p_i,cP.ackermann,cP.camber_compliance_f,cP.camber_compliance_r,cP.static_r_toe);

for i = 1:numel(mass)
    aero = Aero(cda(i), cla(i), distribution(i));
    aero_accel = Aero(accel_cda(i), accel_cla(i), distribution(i));  % Use same distribution unless there's a separate accel_distribution

    powertrain = Powertrain(redline(i), shift_point(i), eP.gears, eP.primary_reduction, eP.torque_fn, shift_time(i), ...
        final_drive(i), wheel_radius(i), drivetrain_efficiency(i), ...
        G_d1(i), G_d2_overrun(i), G_d2_driving(i), brake_distribution(i), max_braking_torque(i));

    tire = Tire2(p_i(i), tP.Fx_parameters, tP.Fy_parameters, tP.friction_scaling_factor);

    car = Car(mass(i)+driver_weight(i), wheelbase(i), weight_dist(i), track_width(i), wheel_radius(i), ...
        cg_height(i), roll_center_height_front(i), roll_center_height_rear(i), R_sf(i), I_zz(i), ...
        gamma(i), camber_compliance_f(i), camber_compliance_r(i), aero, powertrain, tire, ackermann(i), static_r_toe(i));

    accel_car = Car(mass(i)+accel_driver_weight(i), wheelbase(i), weight_dist(i), track_width(i), wheel_radius(i), ...
        cg_height(i), roll_center_height_front(i), roll_center_height_rear(i), R_sf(i), I_zz(i), ...
        gamma(i), camber_compliance_f(i),camber_compliance_r(i), aero_accel, powertrain, tire, ackermann(i), static_r_toe(i));

    car_cell{i,1} = car;
    car_cell{i,2} = accel_car;
end
