function [M, C, K] = calc_MCK_decoupled(car,tirePos,tireVel)

% for i=1:2 %calculate motion ratios by interp of data
%     tireX = tirePos(i)*39.3701; %get current tire pos (m to in)
%     MRArr(i) = lininterp1(car.MR_F(:,1),car.MR_F(:,2),tireX); %MR data within damping mat
% end
% for i=3:4 %calculate motion ratios by interp of data
%     tireX = tirePos(i)*39.3701; %get current tire pos (m to in)
%     MRArr(i) = lininterp1(car.MR_R(:,1),car.MR_R(:,2),tireX); %MR data within damping mat
% end

% General Indexing for decoupled parameters - MRArr, cArr, etc.:
% 1 - Front Bounce, 2 - Front Roll, 3 - Rear Bounce, 4 Rear Roll

% General Indexing for Tires
% 1 - Front left, 2 - Front Right, 3 - Rear Left, 4 - Rear Right

% Fixed Motion Ratios (add interp from WinGeo Data in Future)
MR_1B = 1;
MR_2B = 1;
MR_3B = 1;
MR_4B = 1; 

MR_1R = 1;
MR_2R = 1;
MR_3R = 1;
MR_4R = 1; 

k_c = 10^9;

% figure out how to have two different damper settings 

%c_r = car.c_rebound;
% for i =1:4 %calculate damping coeff by interp of dampingcurves.mat data
%     v = tireVel(i)*MRArr(i)*39.3701; % get current tire vel (m/s to in/s)    
%     if v == 0
%         cArr(i) = (c_c(2,2)-c_c(1,2))/(c_c(2,1)-c_c(1,1))*175.126835;
%     elseif v > 0
%         cArr(i) = lininterp1(c_c(:,1),c_c(:,2),v)/v*175.126835;
%     else
%         cArr(i) = lininterp1(c_r(:,1),-c_r(:,2),-v)/v*-175.126835;
%     end
% end

% assume 0 damper velocity 
c_c = car.c_compression;
cArr(1:4) = (c_c(2,2)-c_c(1,2))/(c_c(2,1)-c_c(1,1))*175.126835;

k_tf = car.k_tf; % tire stiffness
k_tr = car.k_tr;
m = car.M;
m_f = m/10; % unsprung mass
m_r = m_f;

Ix = car.Ixx;
Iy = car.Iyy;
l_f = car.l_f; % distances from axles to CG
l_r = car.l_r;
t_f = car.t_f/2; % half track
t_r = car.t_r/2;

% roll and bounce spring rates
car.k_f_b = 250*4.45*39.37;
car.k_f_r = 250*4.45*39.37;
car.k_r_b = 250*4.45*39.37;
car.k_r_r = 250*4.45*39.37;

k_f_b = car.k_f_b;
k_f_r = car.k_f_r;
k_r_b = car.k_r_b;
k_r_r = car.k_r_r;

c_f_b = cArr(1);
c_f_r = cArr(2);
c_r_b = cArr(3);
c_r_r = cArr(4);


% Generated by EquationsOfMotionGenerator.mlx, 
% if you have questions, call Aeden at (323) 458 - 3881
M = [m, 0, 0, 0, 0, 0, 0, 0;
    0, Ix/2, 0, 0, 0, 0, 0, 0;
    0, 0, Ix/2, 0, 0, 0, 0, 0;
    0, 0, 0, Iy, 0, 0, 0, 0;
    0, 0, 0, 0, m_f, 0, 0, 0;
    0, 0, 0, 0, 0, m_f, 0, 0;
    0, 0, 0, 0, 0, 0, m_r, 0;
    0, 0, 0, 0, 0, 0, 0, m_r];

C = [c_f_b*MR_1B^2 + 2*c_f_b*MR_1B*MR_2B + c_f_b*MR_2B^2 + c_r_b*MR_3B^2 + 2*c_r_b*MR_3B*MR_4B + c_r_b*MR_4B^2 + c_f_r*MR_1R^2 - 2*c_f_r*MR_1R*MR_2R + c_f_r*MR_2R^2 + c_r_r*MR_3R^2 - 2*c_r_r*MR_3R*MR_4R + c_r_r*MR_4R^2, c_f_b*t_f*MR_1B^2 - c_f_b*t_f*MR_2B^2 + c_r_b*t_r*MR_3B^2 - c_r_b*t_r*MR_4B^2 + c_f_r*t_f*MR_1R^2 - c_f_r*t_f*MR_2R^2 + c_r_r*t_r*MR_3R^2 - c_r_r*t_r*MR_4R^2, 0, - c_f_b*l_f*MR_1B^2 - 2*c_f_b*l_f*MR_1B*MR_2B - c_f_b*l_f*MR_2B^2 + c_r_b*l_r*MR_3B^2 + 2*c_r_b*l_r*MR_3B*MR_4B + c_r_b*l_r*MR_4B^2 - c_f_r*l_f*MR_1R^2 + 2*c_f_r*l_f*MR_1R*MR_2R - c_f_r*l_f*MR_2R^2 + c_r_r*l_r*MR_3R^2 - 2*c_r_r*l_r*MR_3R*MR_4R + c_r_r*l_r*MR_4R^2, - c_f_b*MR_1B^2 - MR_2B*c_f_b*MR_1B - c_f_r*MR_1R^2 + MR_2R*c_f_r*MR_1R, - c_f_b*MR_2B^2 - MR_1B*c_f_b*MR_2B - c_f_r*MR_2R^2 + MR_1R*c_f_r*MR_2R, - c_r_b*MR_3B^2 - MR_4B*c_r_b*MR_3B - c_r_r*MR_3R^2 + MR_4R*c_r_r*MR_3R, - c_r_b*MR_4B^2 - MR_3B*c_r_b*MR_4B - c_r_r*MR_4R^2 + MR_3R*c_r_r*MR_4R; ... 
 c_f_b*t_f*MR_1B^2 - c_f_b*t_f*MR_2B^2 + c_r_b*t_r*MR_3B^2 - c_r_b*t_r*MR_4B^2 + c_f_r*t_f*MR_1R^2 - c_f_r*t_f*MR_2R^2 + c_r_r*t_r*MR_3R^2 - c_r_r*t_r*MR_4R^2, c_f_b*MR_1B^2*t_f^2 - 2*c_f_b*MR_1B*MR_2B*t_f^2 + c_f_b*MR_2B^2*t_f^2 + c_r_b*MR_3B^2*t_r^2 - 2*c_r_b*MR_3B*MR_4B*t_r^2 + c_r_b*MR_4B^2*t_r^2 + c_f_r*MR_1R^2*t_f^2 + 2*c_f_r*MR_1R*MR_2R*t_f^2 + c_f_r*MR_2R^2*t_f^2 + c_r_r*MR_3R^2*t_r^2 + 2*c_r_r*MR_3R*MR_4R*t_r^2 + c_r_r*MR_4R^2*t_r^2 + k_c, -k_c, - c_f_b*l_f*t_f*MR_1B^2 + c_f_b*l_f*t_f*MR_2B^2 + c_r_b*l_r*t_r*MR_3B^2 - c_r_b*l_r*t_r*MR_4B^2 - c_f_r*l_f*t_f*MR_1R^2 + c_f_r*l_f*t_f*MR_2R^2 + c_r_r*l_r*t_r*MR_3R^2 - c_r_r*l_r*t_r*MR_4R^2, -t_f*(c_f_b*MR_1B^2 - MR_2B*c_f_b*MR_1B + c_f_r*MR_1R^2 + MR_2R*c_f_r*MR_1R), t_f*(c_f_b*MR_2B^2 - MR_1B*c_f_b*MR_2B + c_f_r*MR_2R^2 + MR_1R*c_f_r*MR_2R), -t_r*(c_r_b*MR_3B^2 - MR_4B*c_r_b*MR_3B + c_r_r*MR_3R^2 + MR_4R*c_r_r*MR_3R), t_r*(c_r_b*MR_4B^2 - MR_3B*c_r_b*MR_4B + c_r_r*MR_4R^2 + MR_3R*c_r_r*MR_4R); ... 
 0, -k_c, k_c, 0, 0, 0, 0, 0; ... 
 - c_f_b*l_f*MR_1B^2 - 2*c_f_b*l_f*MR_1B*MR_2B - c_f_b*l_f*MR_2B^2 + c_r_b*l_r*MR_3B^2 + 2*c_r_b*l_r*MR_3B*MR_4B + c_r_b*l_r*MR_4B^2 - c_f_r*l_f*MR_1R^2 + 2*c_f_r*l_f*MR_1R*MR_2R - c_f_r*l_f*MR_2R^2 + c_r_r*l_r*MR_3R^2 - 2*c_r_r*l_r*MR_3R*MR_4R + c_r_r*l_r*MR_4R^2, - c_f_b*l_f*t_f*MR_1B^2 + c_f_b*l_f*t_f*MR_2B^2 + c_r_b*l_r*t_r*MR_3B^2 - c_r_b*l_r*t_r*MR_4B^2 - c_f_r*l_f*t_f*MR_1R^2 + c_f_r*l_f*t_f*MR_2R^2 + c_r_r*l_r*t_r*MR_3R^2 - c_r_r*l_r*t_r*MR_4R^2, 0, c_f_b*MR_1B^2*l_f^2 + 2*c_f_b*MR_1B*MR_2B*l_f^2 + c_f_b*MR_2B^2*l_f^2 + c_r_b*MR_3B^2*l_r^2 + 2*c_r_b*MR_3B*MR_4B*l_r^2 + c_r_b*MR_4B^2*l_r^2 + c_f_r*MR_1R^2*l_f^2 - 2*c_f_r*MR_1R*MR_2R*l_f^2 + c_f_r*MR_2R^2*l_f^2 + c_r_r*MR_3R^2*l_r^2 - 2*c_r_r*MR_3R*MR_4R*l_r^2 + c_r_r*MR_4R^2*l_r^2, l_f*(c_f_b*MR_1B^2 + MR_2B*c_f_b*MR_1B + c_f_r*MR_1R^2 - MR_2R*c_f_r*MR_1R), l_f*(c_f_b*MR_2B^2 + MR_1B*c_f_b*MR_2B + c_f_r*MR_2R^2 - MR_1R*c_f_r*MR_2R), -l_r*(c_r_b*MR_3B^2 + MR_4B*c_r_b*MR_3B + c_r_r*MR_3R^2 - MR_4R*c_r_r*MR_3R), -l_r*(c_r_b*MR_4B^2 + MR_3B*c_r_b*MR_4B + c_r_r*MR_4R^2 - MR_3R*c_r_r*MR_4R); ... 
 - c_f_b*MR_1B^2 - MR_2B*c_f_b*MR_1B - c_f_r*MR_1R^2 + MR_2R*c_f_r*MR_1R, -t_f*(c_f_b*MR_1B^2 - MR_2B*c_f_b*MR_1B + c_f_r*MR_1R^2 + MR_2R*c_f_r*MR_1R), 0, l_f*(c_f_b*MR_1B^2 + MR_2B*c_f_b*MR_1B + c_f_r*MR_1R^2 - MR_2R*c_f_r*MR_1R), c_f_b*MR_1B^2 + c_f_r*MR_1R^2, MR_1B*MR_2B*c_f_b - MR_1R*MR_2R*c_f_r, 0, 0; ... 
 - c_f_b*MR_2B^2 - MR_1B*c_f_b*MR_2B - c_f_r*MR_2R^2 + MR_1R*c_f_r*MR_2R, t_f*(c_f_b*MR_2B^2 - MR_1B*c_f_b*MR_2B + c_f_r*MR_2R^2 + MR_1R*c_f_r*MR_2R), 0, l_f*(c_f_b*MR_2B^2 + MR_1B*c_f_b*MR_2B + c_f_r*MR_2R^2 - MR_1R*c_f_r*MR_2R), MR_1B*MR_2B*c_f_b - MR_1R*MR_2R*c_f_r, c_f_b*MR_2B^2 + c_f_r*MR_2R^2, 0, 0; ... 
 - c_r_b*MR_3B^2 - MR_4B*c_r_b*MR_3B - c_r_r*MR_3R^2 + MR_4R*c_r_r*MR_3R, -t_r*(c_r_b*MR_3B^2 - MR_4B*c_r_b*MR_3B + c_r_r*MR_3R^2 + MR_4R*c_r_r*MR_3R), 0, -l_r*(c_r_b*MR_3B^2 + MR_4B*c_r_b*MR_3B + c_r_r*MR_3R^2 - MR_4R*c_r_r*MR_3R), 0, 0, c_r_b*MR_3B^2 + c_r_r*MR_3R^2, MR_3B*MR_4B*c_r_b - MR_3R*MR_4R*c_r_r; ... 
 - c_r_b*MR_4B^2 - MR_3B*c_r_b*MR_4B - c_r_r*MR_4R^2 + MR_3R*c_r_r*MR_4R, t_r*(c_r_b*MR_4B^2 - MR_3B*c_r_b*MR_4B + c_r_r*MR_4R^2 + MR_3R*c_r_r*MR_4R), 0, -l_r*(c_r_b*MR_4B^2 + MR_3B*c_r_b*MR_4B + c_r_r*MR_4R^2 - MR_3R*c_r_r*MR_4R), 0, 0, MR_3B*MR_4B*c_r_b - MR_3R*MR_4R*c_r_r, c_r_b*MR_4B^2 + c_r_r*MR_4R^2];

K = [k_f_b*MR_1B^2 + 2*k_f_b*MR_1B*MR_2B + k_f_b*MR_2B^2 + k_r_b*MR_3B^2 + 2*k_r_b*MR_3B*MR_4B + k_r_b*MR_4B^2 + k_f_r*MR_1R^2 - 2*k_f_r*MR_1R*MR_2R + k_f_r*MR_2R^2 + k_r_r*MR_3R^2 - 2*k_r_r*MR_3R*MR_4R + k_r_r*MR_4R^2, k_f_b*t_f*MR_1B^2 - k_f_b*t_f*MR_2B^2 + k_r_b*t_r*MR_3B^2 - k_r_b*t_r*MR_4B^2 + k_f_r*t_f*MR_1R^2 - k_f_r*t_f*MR_2R^2 + k_r_r*t_r*MR_3R^2 - k_r_r*t_r*MR_4R^2, 0, - k_f_b*l_f*MR_1B^2 - 2*k_f_b*l_f*MR_1B*MR_2B - k_f_b*l_f*MR_2B^2 + k_r_b*l_r*MR_3B^2 + 2*k_r_b*l_r*MR_3B*MR_4B + k_r_b*l_r*MR_4B^2 - k_f_r*l_f*MR_1R^2 + 2*k_f_r*l_f*MR_1R*MR_2R - k_f_r*l_f*MR_2R^2 + k_r_r*l_r*MR_3R^2 - 2*k_r_r*l_r*MR_3R*MR_4R + k_r_r*l_r*MR_4R^2, - k_f_b*MR_1B^2 - MR_2B*k_f_b*MR_1B - k_f_r*MR_1R^2 + MR_2R*k_f_r*MR_1R, - k_f_b*MR_2B^2 - MR_1B*k_f_b*MR_2B - k_f_r*MR_2R^2 + MR_1R*k_f_r*MR_2R, - k_r_b*MR_3B^2 - MR_4B*k_r_b*MR_3B - k_r_r*MR_3R^2 + MR_4R*k_r_r*MR_3R, - k_r_b*MR_4B^2 - MR_3B*k_r_b*MR_4B - k_r_r*MR_4R^2 + MR_3R*k_r_r*MR_4R;...
    k_f_b*t_f*MR_1B^2 - k_f_b*t_f*MR_2B^2 + k_r_b*t_r*MR_3B^2 - k_r_b*t_r*MR_4B^2 + k_f_r*t_f*MR_1R^2 - k_f_r*t_f*MR_2R^2 + k_r_r*t_r*MR_3R^2 - k_r_r*t_r*MR_4R^2, k_f_b*MR_1B^2*t_f^2 - 2*k_f_b*MR_1B*MR_2B*t_f^2 + k_f_b*MR_2B^2*t_f^2 + k_r_b*MR_3B^2*t_r^2 - 2*k_r_b*MR_3B*MR_4B*t_r^2 + k_r_b*MR_4B^2*t_r^2 + k_f_r*MR_1R^2*t_f^2 + 2*k_f_r*MR_1R*MR_2R*t_f^2 + k_f_r*MR_2R^2*t_f^2 + k_r_r*MR_3R^2*t_r^2 + 2*k_r_r*MR_3R*MR_4R*t_r^2 + k_r_r*MR_4R^2*t_r^2 + k_c, -k_c, - k_f_b*l_f*t_f*MR_1B^2 + k_f_b*l_f*t_f*MR_2B^2 + k_r_b*l_r*t_r*MR_3B^2 - k_r_b*l_r*t_r*MR_4B^2 - k_f_r*l_f*t_f*MR_1R^2 + k_f_r*l_f*t_f*MR_2R^2 + k_r_r*l_r*t_r*MR_3R^2 - k_r_r*l_r*t_r*MR_4R^2, -t_f*(k_f_b*MR_1B^2 - MR_2B*k_f_b*MR_1B + k_f_r*MR_1R^2 + MR_2R*k_f_r*MR_1R), t_f*(k_f_b*MR_2B^2 - MR_1B*k_f_b*MR_2B + k_f_r*MR_2R^2 + MR_1R*k_f_r*MR_2R), -t_r*(k_r_b*MR_3B^2 - MR_4B*k_r_b*MR_3B + k_r_r*MR_3R^2 + MR_4R*k_r_r*MR_3R), t_r*(k_r_b*MR_4B^2 - MR_3B*k_r_b*MR_4B + k_r_r*MR_4R^2 + MR_3R*k_r_r*MR_4R); 0, -k_c, k_c, 0, 0, 0, 0, 0; - k_f_b*l_f*MR_1B^2 - 2*k_f_b*l_f*MR_1B*MR_2B - k_f_b*l_f*MR_2B^2 + k_r_b*l_r*MR_3B^2 + 2*k_r_b*l_r*MR_3B*MR_4B + k_r_b*l_r*MR_4B^2 - k_f_r*l_f*MR_1R^2 + 2*k_f_r*l_f*MR_1R*MR_2R - k_f_r*l_f*MR_2R^2 + k_r_r*l_r*MR_3R^2 - 2*k_r_r*l_r*MR_3R*MR_4R + k_r_r*l_r*MR_4R^2, - k_f_b*l_f*t_f*MR_1B^2 + k_f_b*l_f*t_f*MR_2B^2 + k_r_b*l_r*t_r*MR_3B^2 - k_r_b*l_r*t_r*MR_4B^2 - k_f_r*l_f*t_f*MR_1R^2 + k_f_r*l_f*t_f*MR_2R^2 + k_r_r*l_r*t_r*MR_3R^2 - k_r_r*l_r*t_r*MR_4R^2, 0, k_f_b*MR_1B^2*l_f^2 + 2*k_f_b*MR_1B*MR_2B*l_f^2 + k_f_b*MR_2B^2*l_f^2 + k_r_b*MR_3B^2*l_r^2 + 2*k_r_b*MR_3B*MR_4B*l_r^2 + k_r_b*MR_4B^2*l_r^2 + k_f_r*MR_1R^2*l_f^2 - 2*k_f_r*MR_1R*MR_2R*l_f^2 + k_f_r*MR_2R^2*l_f^2 + k_r_r*MR_3R^2*l_r^2 - 2*k_r_r*MR_3R*MR_4R*l_r^2 + k_r_r*MR_4R^2*l_r^2, l_f*(k_f_b*MR_1B^2 + MR_2B*k_f_b*MR_1B + k_f_r*MR_1R^2 - MR_2R*k_f_r*MR_1R), l_f*(k_f_b*MR_2B^2 + MR_1B*k_f_b*MR_2B + k_f_r*MR_2R^2 - MR_1R*k_f_r*MR_2R), -l_r*(k_r_b*MR_3B^2 + MR_4B*k_r_b*MR_3B + k_r_r*MR_3R^2 - MR_4R*k_r_r*MR_3R), -l_r*(k_r_b*MR_4B^2 + MR_3B*k_r_b*MR_4B + k_r_r*MR_4R^2 - MR_3R*k_r_r*MR_4R); - k_f_b*MR_1B^2 - MR_2B*k_f_b*MR_1B - k_f_r*MR_1R^2 + MR_2R*k_f_r*MR_1R, -t_f*(k_f_b*MR_1B^2 - MR_2B*k_f_b*MR_1B + k_f_r*MR_1R^2 + MR_2R*k_f_r*MR_1R), 0, l_f*(k_f_b*MR_1B^2 + MR_2B*k_f_b*MR_1B + k_f_r*MR_1R^2 - MR_2R*k_f_r*MR_1R), k_f_b*MR_1B^2 + k_f_r*MR_1R^2 + k_tf, MR_1B*MR_2B*k_f_b - MR_1R*MR_2R*k_f_r, 0, 0; - k_f_b*MR_2B^2 - MR_1B*k_f_b*MR_2B - k_f_r*MR_2R^2 + MR_1R*k_f_r*MR_2R, t_f*(k_f_b*MR_2B^2 - MR_1B*k_f_b*MR_2B + k_f_r*MR_2R^2 + MR_1R*k_f_r*MR_2R), 0, l_f*(k_f_b*MR_2B^2 + MR_1B*k_f_b*MR_2B + k_f_r*MR_2R^2 - MR_1R*k_f_r*MR_2R), MR_1B*MR_2B*k_f_b - MR_1R*MR_2R*k_f_r, k_f_b*MR_2B^2 + k_f_r*MR_2R^2 + k_tf, 0, 0; - k_r_b*MR_3B^2 - MR_4B*k_r_b*MR_3B - k_r_r*MR_3R^2 + MR_4R*k_r_r*MR_3R, -t_r*(k_r_b*MR_3B^2 - MR_4B*k_r_b*MR_3B + k_r_r*MR_3R^2 + MR_4R*k_r_r*MR_3R), 0, -l_r*(k_r_b*MR_3B^2 + MR_4B*k_r_b*MR_3B + k_r_r*MR_3R^2 - MR_4R*k_r_r*MR_3R), 0, 0, k_r_b*MR_3B^2 + k_r_r*MR_3R^2 + k_tr, MR_3B*MR_4B*k_r_b - MR_3R*MR_4R*k_r_r; - k_r_b*MR_4B^2 - MR_3B*k_r_b*MR_4B - k_r_r*MR_4R^2 + MR_3R*k_r_r*MR_4R, t_r*(k_r_b*MR_4B^2 - MR_3B*k_r_b*MR_4B + k_r_r*MR_4R^2 + MR_3R*k_r_r*MR_4R), 0, -l_r*(k_r_b*MR_4B^2 + MR_3B*k_r_b*MR_4B + k_r_r*MR_4R^2 - MR_3R*k_r_r*MR_4R), 0, 0, MR_3B*MR_4B*k_r_b - MR_3R*MR_4R*k_r_r, k_r_b*MR_4B^2 + k_r_r*MR_4R^2 + k_tr];